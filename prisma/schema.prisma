generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String?
  image             String?
  isReader          Boolean  @default(false)
  amazonAssociateId String?
  noteUrl           String?
  twitterUrl        String?
  bio               String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  readingRecords    ReadingRecord[]
  recommendations   Recommendation[]
  onboardingAnswers OnboardingAnswer[]

  @@map("users")
}

model Book {
  id          String  @id @default(cuid())
  title       String
  author      String
  isbn        String? @unique
  amazonUrl   String
  imageUrl    String?
  description String?
  genre       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  recommendations Recommendation[]
  readingRecords  ReadingRecord[]

  @@map("books")
}

model Recommendation {
  id             String   @id @default(cuid())
  userId         String
  bookId         String
  articleUrl     String?
  title          String
  description    String
  isPublic       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("recommendations")
}

model ReadingRecord {
  id          String   @id @default(cuid())
  userId      String
  bookId      String
  content     String
  isPublic    Boolean  @default(false)
  readAt      DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("reading_records")
}

model OnboardingQuestion {
  id       String @id @default(cuid())
  question String
  options  Json
  order    Int
  isActive Boolean @default(true)

  // Relations
  answers OnboardingAnswer[]

  @@map("onboarding_questions")
}

model OnboardingAnswer {
  id         String @id @default(cuid())
  userId     String
  questionId String
  answer     String
  createdAt  DateTime @default(now())

  // Relations
  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  question OnboardingQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@map("onboarding_answers")
}